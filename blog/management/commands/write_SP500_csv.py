#To run, go to folder containing manage.py with the following command: >python manage.py [script name]from django.core.management.base import BaseCommand, CommandErrorimport csvimport requestsimport datetimeimport reimport randomimport timefrom blog.models import SP500_Postclass Command(BaseCommand):	help = "Populates csv file for DJ list"	def StrFet(self, sep, num, end):  #StrFet() function fetches components of key statistics page; att=attribute, sep=separator, num=Nth separator, end=delimiter.		if sep not in html:  #Return "N/A" when there is nothing inside {}.			return "N/A"		else:			att = ""			for ch in html.split(sep)[num]:				if ch != end:					att += ch				else:					break #terminates the nearest enclosing loop when '<' is ran into (the loop control target, ch, keeps its current value).			if att[0] == '"':  #Return "N/A" if raw is contained in '"'.				return "N/A"			else:				return att	def handle(self, *args, **options):		global html  #Makes html accessible to all functions outside of handle.		today = str(datetime.date.today())		#print today		with open('SP500_list.csv', 'ab') as file:  #Use 'ab' to append in binary mode (preventing line skip) to existing csv file.			#file = open('SP500_list.csv', 'wb')			outfile = csv.writer(file, delimiter=",", quotechar='"')			#print html.count('"raw":{"symbol":"')			response = requests.get('https://en.wikipedia.org/wiki/List_of_S%26P_500_companies')			html = response.text  #Converts page request to string variable.			#print html			SP500_list = []			for iter in xrange(1,html.count('XNYS:')+1):  #html.count() returns the number of (non-overlapping) occurrences of substring 'XNYS:'in html. xrange creats a list starting at 1 in this case.				SP500sym = ""				for ch in html.split('XNYS:')[iter]:					if ch != "\"":						SP500sym += ch					else:						break				SP500_list.append(SP500sym)			for iter in xrange(1,html.count('symbol/')+1):  #html.count() returns the number of (non-overlapping) occurrences of substring 'XNYS:'in html. xrange creats a list starting at 1 in this case.				SP500sym = ""				for ch in html.split('symbol/')[iter]:					if ch != "\"":						SP500sym += ch					else:						break				SP500_list.append(SP500sym)			SP500_list = [t.replace('.','-').replace('/','-').upper() for t in SP500_list]			SP500_list = sorted(SP500_list)			print SP500_list			#outfile.writerow(['Last Trading Date', 'Symbol', 'Last Price', '52-week Change', '52-week Low', '52-week High', '5 Year Average Dividend Yield', 'Trailing P/E', 'Forward P/E', 'PEG Ratio', 'Price/Sales', 'Price/Book', 'Market Cap', 'Levered Free Cash Flow', 'Market Per Cash Flow', 'Enterprise Value/EBITDA', 'Name'])			for tick in SP500_list:				print tick,				time.sleep(random.randint(0,2))  #Simulate delay from human user between 0 and 2 seconds.				response = requests.get('https://query2.finance.yahoo.com/v10/finance/quoteSummary/'+tick+'?formatted=true&crumb=Z3LBeFwaCFt&lang=en-US&region=US&modules=defaultKeyStatistics%2CfinancialData%2CsummaryDetail%2CcalendarEvents&corsDomain=finance.yahoo.com')				html = response.text  #Convert requests object to string.				#if 'tabledata1\">' in html:				if html:  #Check if page exists.					LP = self.StrFet('"currentPrice":{"raw":', 1, ",")					_52WkChg = self.StrFet('"52WeekChange":{"raw":', 1, ",")					_52WkHi = self.StrFet('"fiftyTwoWeekHigh":{"raw":', 1, ",")					_52WkLo = self.StrFet('"fiftyTwoWeekLow":{"raw":', 1, ",")					Div = self.StrFet('"trailingAnnualDividendYield":{"raw":', 1, ",")					tPE = self.StrFet('"trailingPE":{"raw":', 1, ",")					fPE = self.StrFet('"forwardPE":{"raw":', 1, ",")					PEG = self.StrFet('"pegRatio":{"raw":', 1, ",")					PpS = self.StrFet('"priceToSalesTrailing12Months":{"raw":', 1, ",")					PpB = self.StrFet('"priceToBook":{"raw":', 1, ",")					MktCap = self.StrFet('"marketCap":{"raw":', 1, ",")					FCF = self.StrFet('"operatingCashflow":{"raw":', 1, ",")					if type(MktCap) is not str and type(FCF) is not str and float(FCF) != 0:#if MktCap != "N/A" or FCF != "N/A" or FCF != "0":  #Calculate MpC only when MktCap and FCF are present and not zero.						#print MktCap, FCF						MpC = float(MktCap)/float(FCF)						MpC = str(MpC)					else:						MpC = "N/A"					EpE = self.StrFet('"enterpriseToEbitda":{"raw":', 1, ",")					response = requests.get('https://query1.finance.yahoo.com/v10/finance/quoteSummary/'+tick+'?formatted=true&crumb=8z9aPzzV3E6&lang=en-US&region=US&modules=price%2CsummaryDetail&corsDomain=finance.yahoo.com')					html = response.text  #Converts page request to string variable.					longNameToEnd = ""					for ch in html.split('"longName":')[1]:  #Retrieve all character containing longName plus everything after.						longNameToEnd += ch					longNameSplit = longNameToEnd.split(',\"')  #Terminate character retrieval before the next field variable.					#print longNameSplit[0], longNameSplit[0].count('"')					if longNameSplit[0].count('"') >= 2:  #If longName is contained within '"' mark...						longNameInQuote = longNameSplit[0].replace('amp;','').replace('&apos;',"'")  #Replace html escape character for "&" and "'".						Name = longNameInQuote.encode('utf-8')  #... convert to byte string from unicode.					else:  #...or return "N/A" if longName is null.						Name = "N/A"					'''					csv_row_to_ascii = [row_item.encode('utf-8') for row_item in csv_row_list]  #Remove unicode to ascii format.					outfile.writerow(csv_row_to_ascii)					'''					csv_row_list = [today, tick, LP, _52WkChg, _52WkHi, _52WkLo, Div, tPE, fPE, PEG, PpS, PpB, MktCap, FCF, MpC, EpE, Name]					outfile.writerow(csv_row_list)				else:					outfile.writerow([today, tick]+['N/A']*15)  #Output when url is incorrect.		if SP500_list:  #To avoid entering duplicate data, only enter into sql database if SP500_list is neither empty nor null.			fields = ['Day', 'Symbol', 'LastPrice', 'FiftyTwoWkChg', 'FiftyTwoWkHi', 'FiftyTwoWkLo', 'DivYild', 'TrailPE', 'ForwardPE', 'PEG_Ratio', 'PpS', 'PpB', 'Market_Cap', 'Free_Cash_Flow', 'Market_per_CashFlow', 'Enterprise_per_EBITDA', 'Name']  #Must match individual column names in models.py for entry into database.			with open('SP500_list.csv', 'rb') as file:  # May need to use absolute path when on Pythonanywhere server (i.e. use '/home/cqcum6er/my-first-blog/SP500_list.csv' as file path.)				infile = csv.reader(file, delimiter=",", quotechar='"')  #Specify csv item boundary.				LastRowDate = ""  #Reserve a variable for the date from last row.				#print type(LastRowDate)				for row in reversed(list(infile)):  #Read csv file in reverse order or the most recent entry 1st for display on server; must convert csv reader object to list format 1st with list().					if row[0] == LastRowDate or LastRowDate == "":  #Keep writing to database while the date is still the same as last entry.						SP500_Post.objects.create(**dict(zip(fields, row)))  #zip() combines two lists into one list of pairs of items from both lists (fields and row). dict() converts the list of pairs into a dictionary. (**{'key': 'value'}) is the equivalent of function(key='value').						LastRowDate = row[0]  #Mark the current date for comparison to the next date from the next row.					else:						break